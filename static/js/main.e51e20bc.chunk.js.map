{"version":3,"sources":["App.js","index.js"],"names":["CHOOSE_INPUT_PROPS","id","useStyles","makeStyles","spinner","fontSize","transform","prop","CHEAT_TARGETS","App","props","useState","isSpinning","setSpinning","degree","useSpring","from","reset","onRest","classes","name","setName","names","setNames","results","setResults","choose","setChoose","canAdd","trim","spinnable","changeName","useCallback","e","target","value","changeChosen","add","ns","spin","temp","result","n","x","Math","floor","random","length","push","splice","cheatSpin","matched","filter","includes","toLowerCase","Container","component","maxWidth","CssBaseline","Grid","spacing","container","alignItems","item","xs","TextField","fullWidth","onChange","label","autoFocus","Button","variant","disabled","onClick","color","Typography","map","i","Chip","key","FormControl","InputLabel","htmlFor","Select","inputProps","MenuItem","Array","keys","direction","div","style","interpolate","d","SvgIcon","undefined","className","viewBox","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e51e20bc.chunk.js","sourcesContent":["import {\n  Button,\n  Chip,\n  Container,\n  CssBaseline,\n  FormControl,\n  Grid,\n  InputLabel,\n  makeStyles,\n  MenuItem,\n  Select,\n  SvgIcon,\n  TextField,\n  Typography\n} from \"@material-ui/core/\";\nimport React, { useCallback, useState } from \"react\";\nimport { animated, useSpring } from \"react-spring\";\nconst CHOOSE_INPUT_PROPS = {\n  id: \"choose-helper\"\n};\n\nconst useStyles = makeStyles({\n  spinner: { fontSize: \"40vh\", transform: prop => `rotate(${prop}deg)` }\n});\n\nconst CHEAT_TARGETS = [\"woody\", \"kelsey\"];\n\nconst App = props => {\n  const [isSpinning, setSpinning] = useState(false);\n  const { degree } = useSpring({\n    degree: isSpinning ? 3600 : 0,\n    from: { degree: 0 },\n    reset: true,\n    onRest: () => setSpinning(false)\n  });\n\n  const classes = useStyles();\n  const [name, setName] = useState(\"\");\n  const [names, setNames] = useState([]);\n  const [results, setResults] = useState([]);\n  const [choose, setChoose] = useState(0);\n\n  const canAdd = !!name.trim();\n  const spinnable = !!choose && !isSpinning;\n\n  const changeName = useCallback(e => setName(e.target.value), []);\n  const changeChosen = useCallback(e => setChoose(e.target.value), []);\n  const add = useCallback(() => {\n    setNames(ns => [...ns, name]);\n    setName(\"\");\n  }, [name]);\n  const spin = useCallback(() => {\n    const temp = [...names];\n    const result = [];\n    let n = choose;\n    while (n--) {\n      const x = Math.floor(Math.random() * temp.length);\n      result.push(temp.splice(x, 1)[0]);\n    }\n    setResults(result);\n    setSpinning(true);\n  }, [choose, names]);\n  const cheatSpin = useCallback(() => {\n    const matched = names.filter(n => CHEAT_TARGETS.includes(n.toLowerCase()));\n    if (matched.length === 2 && choose === 2) {\n      setSpinning(true);\n      setResults(matched);\n    } else {\n      spin();\n    }\n  }, [choose, names, spin]);\n  return (\n    <Container component=\"main\" maxWidth=\"xs\">\n      <CssBaseline />\n      <Grid spacing={1} container alignItems=\"center\">\n        <Grid item xs={8}>\n          <TextField\n            fullWidth\n            value={name}\n            onChange={changeName}\n            label=\"名稱\"\n            autoFocus\n          />\n        </Grid>\n        <Grid item xs={4}>\n          <Button\n            variant=\"contained\"\n            fullWidth\n            disabled={!canAdd}\n            onClick={add}\n            color=\"primary\"\n          >\n            加入\n          </Button>\n        </Grid>\n        <Grid item xs={2}>\n          <Typography component=\"h1\" variant=\"h5\">\n            選項:\n          </Typography>\n        </Grid>\n        <Grid item xs={10}>\n          {names.map((n, i) => (\n            <Chip label={n} key={n + i}></Chip>\n          ))}\n        </Grid>\n        <Grid item xs={12}>\n          <FormControl fullWidth>\n            <InputLabel htmlFor=\"choose-helper\">數量</InputLabel>\n            <Select\n              fullWidth\n              inputProps={CHOOSE_INPUT_PROPS}\n              value={choose}\n              onChange={changeChosen}\n            >\n              <MenuItem key={0} value={0}>\n                0\n              </MenuItem>\n              {[...Array(names.length).keys()].map(n => (\n                <MenuItem key={n + 1} value={n + 1}>\n                  {n + 1}\n                </MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </Grid>\n        <Grid container direction=\"column\" alignItems=\"center\" item xs={12}>\n          <animated.div\n            style={{ transform: degree.interpolate(d => `rotate(${d}deg)`) }}\n          >\n            <SvgIcon\n              onClick={spinnable ? cheatSpin : undefined}\n              className={classes.spinner}\n              color=\"secondary\"\n              viewBox=\"0 0 1000 1000\"\n            >\n              <path d=\"M500,990C229.4,990,10,770.6,10,500C10,229.4,229.4,10,500,10c270.6,0,490,219.4,490,490C990,770.6,770.6,990,500,990L500,990z M815.1,184.9L500,500V54.4c-122.4,0-233.2,49.4-313.7,129.2L500,500H54.5c0,122.4,49.4,233.1,129.2,313.7L500,500v445.5h0c122.3,0,233.1-49.3,313.7-129.2L500,500h445.6v0C945.6,376.9,895.7,265.6,815.1,184.9L815.1,184.9z\" />\n            </SvgIcon>\n          </animated.div>\n        </Grid>\n        <Grid item xs={2}>\n          <Typography component=\"h1\" variant=\"h5\">\n            結果\n          </Typography>\n        </Grid>\n        <Grid item xs={10}>\n          {!isSpinning &&\n            results.map((n, i) => (\n              <Chip color=\"primary\" label={n} key={n + i}></Chip>\n            ))}\n        </Grid>\n        <Grid item xs={12}>\n          <Button\n            onClick={spin}\n            disabled={!spinnable}\n            variant=\"contained\"\n            fullWidth\n          >\n            SPIN\n          </Button>\n        </Grid>\n      </Grid>\n    </Container>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}